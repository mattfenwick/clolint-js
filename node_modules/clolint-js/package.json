{
  "name": "clolint-js",
  "version": "0.0.3",
  "description": "parsing and linting of Clojure code",
  "main": "index.js",
  "directories": {
    "test": "test"
  },
  "dependencies": {
    "clojarse-js": "0.1.2"
  },
  "devDependencies": {
    "grunt": "~0.4.4",
    "grunt-cli": "0.1.13",
    "grunt-contrib-jshint": "~0.9.2",
    "mocha": "1.18.2"
  },
  "scripts": {
    "test": "mocha --reporter spec test/"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/mattfenwick/clolint-js.git"
  },
  "keywords": [
    "Clojure",
    "lint",
    "parse",
    "parsing"
  ],
  "author": {
    "name": "Matt Fenwick"
  },
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/mattfenwick/clolint-js/issues"
  },
  "homepage": "https://github.com/mattfenwick/clolint-js",
  "readme": "[clolint-js](https://www.npmjs.org/package/clolint-js)\n=================\n\n# Quick start #\n\n    $ git clone git@github.com:mattfenwick/clolint-js\n    $ cd clolint-js\n    $ cat clj/examples.clj | node index.js > output.json\n\n\n# Overview #\n\nA tool for sanity checking Clojure code, by parsing it and performing various\nstatic analyses.  I wrote it to help me learn Clojure -- it finds my stupid \nmistakes!\n\n\n# Examples #\n\nParse errors such as mismatched or unmatched braces generate traces of \nline/column information, indicating what the parser was working on when it\nfailed:\n\n    $ echo '(a b c' | node index.js\n\n        {\n          \"status\": \"error\",\n          \"value\": {\n            \"phase\": \"parsing\",\n            \"error information\": [\n              [\"clojure\", [1, 1]],\n              [\"list\", [1, 1]],\n              [\"close\", [2, 1]]\n            ]\n          }\n        }\n\n\nDomain checks of forms -- i.e. do the values satisfy Clojure constraints:\n\n    $ echo '{:a} \\newlin ^ 3 []' | node index.js\n\n        {\n          \"status\": \"success\",\n          \"value\": [\n            {\n              \"number\": 1,\n              \"severity\": \"error\",\n              \"message\": \"uneven number of elements in table\",\n              \"position\": [1, 1]\n            },\n            {\n              \"value\": \"newlin\",\n              \"severity\": \"error\",\n              \"message\": \"invalid long char\",\n              \"position\": [1, 6]\n            },\n            {\n              \"type\": \"integer\",\n              \"severity\": \"error\",\n              \"message\": \"invalid metadata type\",\n              \"position\": [1, 16]\n            }\n          ]\n        }\n\n\nSpecial form syntax:\n\n    $ echo '(def x :docs 4)' | node index.js\n\n        {\n          \"status\": \"success\",\n          \"value\": [\n            {\n              \"severity\": \"error\",\n              \"name\": \"def\",\n              \"message\": \"in 4-arg version, doc-string must be a string\",\n              \"position\": [1, 8]\n            }\n          ]\n        }\n\n    \nAnonymous functions and arguments:\n\n    $ echo '%x #(%a)' | node index.js\n    \n        {\n          \"status\": \"success\",\n          \"value\": [\n            {\n              \"symbol\": \"%x\",\n              \"severity\": \"warning\",\n              \"message\": \"%-args should not be used outside of #-shorthand functions\",\n              \"position\": [1, 1]\n            },\n            {\n              \"error\": [[\"token\", [1, 7]]],\n              \"text\": \"%a\",\n              \"severity\": \"error\",\n              \"message\": \"invalid %-arg\",\n              \"position\": [1, 6]\n            }\n          ]\n        }\n\n\n    $ echo '#(a #(b %1) %)' | node index.js\n\n        {\n          \"status\": \"success\",\n          \"value\": [\n            {\n              \"positions\": [[1, 1]],\n              \"severity\": \"error\",\n              \"message\": \"nested shorthand function\",\n              \"position\": [1, 5]\n            }\n          ]\n        }\n\n\n(TODO) Macro and function syntax\n\n    $ echo '(fn)' | node index.js\n    \n    ... TODO ...\n\n(TODO) Indentation\n\n(TODO) Symbol definitions: unused, undefined, redefined, shadowed\n\n\n# Other resources #\n\n - [the CCW ANTLR grammar](https://github.com/laurentpetit/ccw) \n - [the Clojure implementation](https://github.com/clojure/clojure/blob/master/src/jvm/clojure/lang/LispReader.java)\n - [the parsing library](https://github.com/mattfenwick/clojarse-js)\n\n\n# License #\n\nMIT.  Please don't use it for evil.\n\n\n# Contributing #\n\nFeatures, patches, ideas, corrections are all welcome!\n\n",
  "readmeFilename": "README.md",
  "_id": "clolint-js@0.0.3",
  "dist": {
    "shasum": "e76e545bda09853c1305c1610ebc03f97d2254c8"
  },
  "_from": "clolint-js@0.0.3",
  "_resolved": "https://registry.npmjs.org/clolint-js/-/clolint-js-0.0.3.tgz"
}
