{
  "name": "clojarse-js",
  "version": "0.0.1",
  "description": "concrete parsing of Clojure code",
  "main": "index.js",
  "directories": {
    "test": "test"
  },
  "dependencies": {
    "unparse-js": "0.1.6"
  },
  "devDependencies": {
    "grunt": "~0.4.4",
    "grunt-cli": "0.1.13",
    "grunt-contrib-jshint": "~0.9.2",
    "mocha": "1.18.2"
  },
  "scripts": {
    "test": "mocha --reporter spec test/ test/parser"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/mattfenwick/clojarse-js.git"
  },
  "keywords": [
    "Clojure",
    "parse",
    "parsing"
  ],
  "author": {
    "name": "Matt Fenwick"
  },
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/mattfenwick/clojarse-js/issues"
  },
  "homepage": "https://github.com/mattfenwick/clojarse-js",
  "readme": "[clolint-js](http://mattfenwick.github.io/clolint-js/)\n=================\n\n# Other resources #\n\n - [the CCW ANTLR grammar](https://github.com/laurentpetit/ccw) \n - [the Clojure implementation](https://github.com/clojure/clojure/blob/master/src/jvm/clojure/lang/LispReader.java)\n\n\n# Structural parsing #\n\nGoal: correctly break input into tokens and hierarchical forms, but don't\nworry about verifying that tokens have the correctly internal structure.\nJust make sure the right amount of text is matched for each token.\n\n\n\n# Token parsing #\n\nGoal: determine the internal structure of the number, ident,\nchar, string, and regex tokens\n\n\n\n# Static token constraints #\n\n### String ###\n\noctal escape\n\n - value must be less than `8r400` \n\n### Regex ###\n\n - uses `java.util.regex.Pattern.compile` for definition of accepted input\n\n### Ratio ###\n\ndenominator != 0\n\n### Integer ###\n\ncustom base: radix must be <= 36, digits must be within range of radix\n\n### Float ###\n\nbig decimal overflow/underflow: exponent limited to Java Integer range:\nsee http://docs.oracle.com/javase/7/docs/api/java/math/BigDecimal.html#BigDecimal(java.lang.String)\n\n### Symbol ###\n\n### Keyword, auto-keyword ###\n\n### Reserved ###\n\n### Char ###\n\noctal escape\n\n - <= 255\n \nunicode escape: value can *not* be between u+D800 and u+DFFF\n\n    \\uDFFF              ; -> error\n    (first \"\\uDFFF\")    ; -> not an error -- it's okay in strings\n\n",
  "readmeFilename": "README.md",
  "_id": "clojarse-js@0.0.1",
  "dist": {
    "shasum": "fd59df55d40632886ffd74314496fe82ef6ec34e"
  },
  "_from": "clojarse-js@0.0.1",
  "_resolved": "https://registry.npmjs.org/clojarse-js/-/clojarse-js-0.0.1.tgz"
}
